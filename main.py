from datetime import *
from telebot import *
import psycopg2
from dadata import Dadata
import psycopg2.extras
import logging
from telebot.types import  ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from geopy.geocoders import Nominatim
con = psycopg2.connect(
  database="goshavvpan", 
  user="goshavvpan",
  password="sL7ea9wBcrW5hUb",
  host="pg2.sweb.ru",
  port="5432"
)
cur = con.cursor(cursor_factory=psycopg2.extras.DictCursor)  
bot = telebot.TeleBot("6254079896:AAFjlsTdC6uPuWSKhxSaxhnHwptoviWBa_M")
markup_main = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_finding = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_can = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1_can = types.KeyboardButton("‚ùå")
markup_can.add(btn1_can)
btn1_main = types.KeyboardButton("üöÄ")
btn2_main = types.KeyboardButton("‚öôÔ∏è")
markup_main.add(btn1_main, btn2_main)
markup_anketa = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1_anketa = types.KeyboardButton("üöÄ")
btn2_anketa = types.KeyboardButton("üò¥") 
markup_anketa.add(btn1_anketa, btn2_anketa)
markup_ug = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1_ug = types.KeyboardButton("üöπ")
btn2_ug = types.KeyboardButton("üö∫")
markup_ug.add(btn1_ug, btn2_ug)
markup_fg = types.ReplyKeyboardMarkup(resize_keyboard=True)
btn1_fg = types.KeyboardButton("üôé‚Äç‚ôÇ")
btn2_fg = types.KeyboardButton("üôé‚Äç‚ôÄ")
btn3_fg = types.KeyboardButton("üöª")
keyboard_l = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
button_loc = types.KeyboardButton(text="üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É", request_location=True)
keyboard_l.add(button_loc)
markup_fg.add(btn1_fg, btn2_fg, btn3_fg)
markup_del = InlineKeyboardMarkup()
markup_type = InlineKeyboardMarkup(row_width=1)
markup_type.add(InlineKeyboardButton(text='üíòüë• –î—Ä—É–∂–±–∞ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', callback_data='friend_rel'))
markup_type.add(InlineKeyboardButton(text='üë• –î—Ä—É–∂–±–∞', callback_data='friend'))
markup_type.add(InlineKeyboardButton(text='üíò –û—Ç–Ω–æ—à–µ–Ω–∏—è', callback_data='rel'))
markup_type.add(InlineKeyboardButton(text='üíº –î–µ–ª–æ–≤–æ–µ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ', callback_data='diff'))
markup_type.add(InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_second'))
markup_option = InlineKeyboardMarkup(row_width=1)
markup_option.add(InlineKeyboardButton(text='üöª –ü–æ–ª –≤ –∞–Ω–∫–µ—Ç–∞—Ö', callback_data='f_gender'))
markup_option.add(InlineKeyboardButton(text='ü´¥ –í–æ–∑—Ä–∞—Å—Ç –≤ –∞–Ω–∫–µ—Ç–∞—Ö', callback_data='f_age'))
markup_option.add(InlineKeyboardButton(text='‚ÑπÔ∏è –¢–∏–ø –∞–Ω–∫–µ—Ç', callback_data='f_type'))
markup_option.add(InlineKeyboardButton(text='‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back'))
markup_anketa2 = InlineKeyboardMarkup(row_width=1)
markup_anketa2.add(InlineKeyboardButton(text='üì∑ –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ', callback_data='photo'))
markup_anketa2.add(InlineKeyboardButton(text='üì© –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã', callback_data='text'))
markup_anketa2.add(InlineKeyboardButton(text='üí° –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è', callback_data='name'))
markup_anketa2.add(InlineKeyboardButton(text='üìç –ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', callback_data='age'))
markup_anketa2.add(InlineKeyboardButton(text='üåÜ –ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥', callback_data='city'))
markup_anketa2.add(InlineKeyboardButton(text='üöª –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–π –ø–æ–ª', callback_data='my_gender'))
markup_anketa2.add(InlineKeyboardButton(text='üîç –ò–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞', callback_data='option'))
def unknown_error(message):
    try:
        bot.send_message(message.chat.id, '–ù–µ–∏–∑–≤—Å–µ—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!')
    except:
        print('Fatal Error')
@bot.message_handler(commands=['start'])
def start(message):
    try:
        global markup_main
        cur.execute(f"select * from dating.users where user_id = {message.chat.id}")
        data = cur.fetchall()
        if len(data) == 0:
            if message.from_user.username == None:
                bot.send_message(message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∏–º–µ–Ω–∏.\n\n–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.\n\n–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–∏–∂–µ: \nhttps://www.youtube.com/watch?v=muxNQ4HmTyE')
                bot.register_next_step_handler(message, start)
            else: 
                full_name = message.from_user.first_name
                cur.execute(f"insert into dating.users (user_id, user_nick, user_name, user_city) values ({message.chat.id}, '{message.from_user.username}', '{full_name}','empty');")
                con.commit()
                bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º.', reply_markup=types.ReplyKeyboardRemove())
                bot.register_next_step_handler(message, set_city)
        else:
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}.' , reply_markup=markup_main)
    except:
        unknown_error(message)
def set_city(message):
    try:
        if message.text == '/location':
            global keyboard_l
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é.', reply_markup=keyboard_l)
            bot.register_next_step_handler(message, location)
        elif message.text == '/region':
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –º—ã –ø–æ–∫–∞–∂–µ–º –≤–∞–º, –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—Å—Ç—å.')
            bot.register_next_step_handler(message, region)
        else:
            cur.execute('select city_name from dating.city;')
            cit = cur.fetchall()
            is_find = False
            for i in cit:
                if i[0] == message.text.lower().replace('-', '').replace(' ', ''):
                    cur.execute(f"update dating.users set user_city = '{i[0]}' where user_id = {message.chat.id}")
                    con.commit()
                    is_find = True
                    break
            if is_find == False:
                bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω(—á–∏—Å–ª–æ) /region\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é /location\n\n–ò–ª–∏ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
                bot.register_next_step_handler(message, set_city)
            else:
                city_text = message.text.lower()
                bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –∏–∑ –≥–æ—Ä–æ–¥–∞ {city_text.title()}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
                bot.register_next_step_handler(message, set_age)
    except:
        unknown_error(message)
def region(message):
    try:
        if message.text.isnumeric():
            cur.execute(f'select * from dating.city where city_region = {message.text}')
            data = cur.fetchall()
            if len(data) == 0:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message, region)
            else:
                string = ''
                for i in range(len(data)):
                    string = string + 'üìç ' + data[i][0].title() + '\n'
                bot.send_message(message.chat.id, f"–í–æ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ {data[0][2].title()}:\n\n{string[:-1]}")
                bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
                bot.register_next_step_handler(message, set_city)
        else:
            bot.send_message(message.chat.id, f"–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, region)
    except:
        unknown_error(message)
def set_age(message):
    try:
        if message.text.isnumeric():
            cur.execute(f"update dating.users set user_age = {message.text} where user_id = {message.chat.id}")
            con.commit()
            cur.execute(f"update dating.users set finding_age_min = {int(message.text) - 1}, finding_age_max = {int(message.text) + 1} where user_id = {message.chat.id}")
            con.commit()
            global markup_ug
            bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ!\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=markup_ug)
            bot.register_next_step_handler(message, set_gender)
        else:
            bot.send_message(message.chat.id, f"–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, set_age)
    except:
        unknown_error(message)
def set_gender(message):
    try:
        global markup_fg
        if message.text == "üöπ":
            cur.execute(f"update dating.users set user_gender = 'male' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ú—É–∂—Å–∫–æ–π –ø–æ–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ.", reply_markup=markup_fg)
            bot.register_next_step_handler(message, setf_gender)
        elif message.text == "üö∫":
            cur.execute(f"update dating.users set user_gender = 'female' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ.", reply_markup=markup_fg)
            bot.register_next_step_handler(message, setf_gender)
        else:
            bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É.")
            bot.register_next_step_handler(message, set_gender)
    except:
        unknown_error(message)
def update_gender(message):
    try:
        global markup_fg
        global markup_main
        if message.text == "‚ùå":
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_main)
        elif message.text == "üöπ":
            cur.execute(f"update dating.users set user_gender = 'male' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ú—É–∂—Å–∫–æ–π –ø–æ–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=markup_main)
            show_anketa(message)
        elif message.text == "üö∫":
            cur.execute(f"update dating.users set user_gender = 'female' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω.", reply_markup=markup_main)
            show_anketa(message)
        else:
            bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É.")
            bot.register_next_step_handler(message, set_gender)
    except:
        unknown_error(message)
def set_gender(message):
    try:
        global markup_fg
        if message.text == "üöπ":
            cur.execute(f"update dating.users set user_gender = 'male' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ú—É–∂—Å–∫–æ–π –ø–æ–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ.", reply_markup=markup_fg)
            bot.register_next_step_handler(message, setf_gender)
        elif message.text == "üö∫":
            cur.execute(f"update dating.users set user_gender = 'female' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∫–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ.", reply_markup=markup_fg)
            bot.register_next_step_handler(message, setf_gender)
        else:
            bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É.")
            bot.register_next_step_handler(message, set_gender)
    except:
        unknown_error(message)
def setf_gender(message):
    try:
        global markup_anketa
        if message.text == "üôé‚Äç‚ôÇ":
            cur.execute(f"update dating.users set user_finding_gender = 'male' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ú—É–∂—Å–∫–æ–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=markup_anketa)
            show_anketa(message)
        elif message.text == "üôé‚Äç‚ôÄ":
            cur.execute(f"update dating.users set user_finding_gender = 'female' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=markup_anketa)
            show_anketa(message)
        elif message.text == "üöª":
            cur.execute(f"update dating.users set user_finding_gender = 'trans' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ë—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π. –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=markup_anketa)
            show_anketa(message)
        else:
            bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É.")
            bot.register_next_step_handler(message, setf_gender)
    except:
        unknown_error(message)
def location(message):
    try:
        if message.location is not None:
            geolocator = Nominatim(user_agent="Tester")
            location_m = geolocator.reverse(f", {message.location.latitude}, {message.location.longitude}")
            if 'city' in location_m.raw['address']:
                cur.execute(f"select * from dating.city where city_name = '{location_m.raw['address']['city'].lower().replace('-', '').replace(' ', '')}'")
                data = cur.fetchall()
                if len(data) != 0:
                        cur.execute(f"update dating.users set user_city = '{location_m.raw['address']['city'].lower().replace('-', '').replace(' ', '')}' where user_id = {message.chat.id}")
                        con.commit()
                        bot.send_message(message.chat.id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ {location_m.raw['address']['city'].title()} –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=types.ReplyKeyboardRemove())
                        bot.register_next_step_handler(message, set_age)
                else:
                    bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –µ—â–µ —Ä–∞–∑:", reply_markup=types.ReplyKeyboardRemove())
                    bot.register_next_step_handler(message, set_city)
            elif 'state' in location_m.raw['address']:
                cur.execute(f"select * from dating.city where city_data = '{location_m.raw['address']['state'].lower()}'")
                data = cur.fetchall()
                if len(data) != 0:
                    string = ''
                    for i in range(len(data)):
                        string = string + 'üìç ' + data[i][0].title() + '\n'
                    bot.send_message(message.chat.id, f"–í–æ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä—è–¥–æ–º —Å –≤–∞–º–∏:\n\n{string[:-1]}")
                    bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
                    bot.register_next_step_handler(message, set_city)
                else:
                    bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –µ—â–µ —Ä–∞–∑:")
                    bot.register_next_step_handler(message, set_city)
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message, set_city)    
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=keyboard_l)
            bot.register_next_step_handler(message, location)
    except:
        unknown_error(message)
def update_location(message):
    try:
        global markup_main
        if message.location is not None:
            geolocator = Nominatim(user_agent="Tester")
            location_m = geolocator.reverse(f", {message.location.latitude}, {message.location.longitude}")
            if 'city' in location_m.raw['address']:
                cur.execute(f"select * from dating.city where city_name = '{location.raw['address']['city'].lower().replace('-', '').replace(' ', '')}'")
                data = cur.fetchall()
                if len(data) != 0:
                        cur.execute(f"update dating.users set user_city = '{location.raw['address']['city'].lower().replace('-', '').replace(' ', '')}'where user_id = {message.chat.id}")
                        con.commit()
                        bot.send_message(message.chat.id, f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≥–æ—Ä–æ–¥ {location.raw['address']['city'].title()}", reply_markup=markup_main)
                else:
                    bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –µ—â–µ —Ä–∞–∑:", reply_markup=types.ReplyKeyboardRemove())
                    bot.register_next_step_handler(message, update_city)
            elif 'state' in location_m.raw['address']:
                cur.execute(f"select * from dating.city where city_data = '{location.raw['address']['state'].lower()}'")
                data = cur.fetchall()
                if len(data) != 0:
                    string = ''
                    for i in range(len(data)):
                        string = string + 'üìç ' + data[i][0].title() + '\n'
                    bot.send_message(message.chat.id, f"–í–æ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ä—è–¥–æ–º —Å –≤–∞–º–∏:\n\n{string[:-1]}")
                    bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=types.ReplyKeyboardRemove())
                    bot.register_next_step_handler(message, update_city)
                else:
                    bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –µ—â–µ —Ä–∞–∑:")
                    bot.register_next_step_handler(message, update_city)
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message, update_city)    
        else:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ª–æ–∫–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑.', reply_markup=keyboard_l)
            bot.register_next_step_handler(message, update_location)
    except:
        unknown_error(message)
def update_city(message):
    try:
        global markup_main
        if message.text =='‚ùå':
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_main)
        elif message.text == '/location':
            global keyboard_l
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é.', reply_markup=keyboard_l)
            bot.register_next_step_handler(message, update_location)
        elif message.text == '/region':
            bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –∏ –º—ã –ø–æ–∫–∞–∂–µ–º –≤–∞–º, –∫–∞–∫–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—Å—Ç—å.')
            bot.register_next_step_handler(message, update_region)
        else:
            cur.execute('select city_name from dating.city;')
            cit = cur.fetchall()
            is_find = False
            for i in cit:
                if i[0] == message.text.lower().replace('-', '').replace(' ', ''):
                    cur.execute(f"update dating.users set user_city = '{i[0]}' where user_id = {message.chat.id}")
                    con.commit()
                    is_find = True
                    break
            if is_find == False:
                bot.send_message(message.chat.id, '–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç—É –≤ –Ω–∞—à–µ–π –±–∞–∑–µ.\n\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π —Ä–µ–≥–∏–æ–Ω(—á–∏—Å–ª–æ) /region\n\n–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é /location\n\n–ò–ª–∏ –µ—â–µ —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.')
                bot.register_next_step_handler(message, update_city)
            else:
                city_text = message.text.lower()
                bot.send_message(message.chat.id, f"–û—Ç–ª–∏—á–Ω–æ! –ë—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—ã –∏–∑ –≥–æ—Ä–æ–¥–∞ {city_text.title()}", reply_markup=markup_main)
                show_anketa(message)
    except:
        unknown_error(message)
def update_region(message):
    try:
        if message.text.isnumeric():
            cur.execute(f'select * from dating.city where city_region = {message.text}')
            data = cur.fetchall()
            if len(data) == 0:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ç–∞–∫–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –µ—â–µ —Ä–∞–∑:")
                bot.register_next_step_handler(message, update_region)
            else:
                string = ''
                for i in range(len(data)):
                    string = string + 'üìç ' + data[i][0].title() + '\n'
                bot.send_message(message.chat.id, f"–í–æ—Ç –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ {data[0][2].title()}:\n\n{string[:-1]}")
                bot.send_message(message.chat.id, f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
                bot.register_next_step_handler(message, update_city)
        else:
            bot.send_message(message.chat.id, f"–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_region)
    except:
        unknown_error(message)
def show_anketa(message):
    try:
        global markup_anketa2
        cur.execute(f"select user_name, user_gender, user_finding_gender, user_age, user_text, user_city, user_rating, user_photo from dating.users where user_id = {message.chat.id}")
        data = cur.fetchall()
        data = data[0]
        if data[1] == 'male':
            gender_me = '–º—É–∂—Å–∫–æ–π'
        elif data[1] == 'female':
            gender_me = '–∂–µ–Ω—Å–∫–∏–π'
        else:
            gender_me = '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω'
        if data[2] == 'male':
            gender_f = '–º—É–∂—á–∏–Ω—É'
        elif data[2] == 'female':
            gender_f = '–¥–µ–≤—É—à–∫—É'
        else:
            gender_f = '–≤—Å–µ—Ö'
        if data[7] != None:
            bot.send_photo(message.chat.id, data[7])
        bot.send_message(message.chat.id, f"üìå {data[0]}, {data[3]}\n\nüåé {data[5].title()}\n\nüíæ {data[4]}\n\n–†–µ–π—Ç–∏–Ω–≥: {data[6]}\nüöπüö∫ –ü–æ–ª: {gender_me}\nüöª –ò—â—É: {gender_f}", reply_markup=markup_anketa2)
    except:
        unknown_error(message)
def update_age(message):
    try:
        global markup_main
        if message.text == "‚ùå":
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_main)
        elif message.text.isnumeric():
            cur.execute(f"update dating.users set user_age = {message.text} where user_id = {message.chat.id}")
            con.commit()
            cur.execute(f"update dating.users set finding_age_min = {int(message.text) - 1}, finding_age_max = {int(message.text) + 1} where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–í–æ–∑—Ä–∞—Å—Ç –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∞–º –±—É–¥—É—Ç –ø–æ–ø–∞–¥—Ç—å—Å—è –ª—é–¥–∏ –æ—Ç {int(message.text) - 1} –¥–æ {int(message.text) + 1} –ª–µ—Ç, –Ω–æ —ç—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.", reply_markup=markup_main)
            show_anketa(message)
        else:
            bot.send_message(message.chat.id, f"–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç –µ—â–µ —Ä–∞–∑:")
            bot.register_next_step_handler(message, update_age)
    except:
        unknown_error(message)
def update_name(message):
    try:
        global markup_del
        global markup_main
        if message.text == "‚ùå":
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_main)
        elif len(message.text) >= 3 and len(message.text) <= 18:
            cur.execute(f"update dating.users set user_name = '{message.text}' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —Ç—ã - {message.text}', reply_markup=markup_main)
            show_anketa(message)
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –µ—â–µ —Ä–∞–∑, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 18 —Å–∏–º–≤–æ–ª–æ–≤.', reply_markup=markup_del)
            bot.register_next_step_handler(message, update_name)
    except:
        unknown_error(message)
def update_text(message):
    try:
        global markup_del
        global markup_main
        if message.text == "‚ùå":
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_main)
        elif len(message.text) >= 1 and len(message.text) <= 3000:
            cur.execute(f"update dating.users set user_text = '{message.text}' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f'–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å —É —Ç–µ–±—è –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.', reply_markup=markup_main)
            show_anketa(message)
        else:
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –µ—â–µ —Ä–∞–∑, –æ–Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 3000 —Å–∏–º–≤–æ–ª–æ–≤.', reply_markup=markup_del)
            bot.register_next_step_handler(message, update_name)
    except:
        unknown_error(message)
def update_photo(message):
    try:
        global markup_can
        global markup_main
        if message.content_type == 'photo':
            photo = max(message.photo, key=lambda x: x.height)
            file_id = photo.file_id
            cur.execute(f"update dating.users set user_photo = '{file_id}' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, '–£—Å–ø–µ—à–Ω–æ', reply_markup=markup_main)
            show_anketa(message)
        elif(message.content_type == 'text'):
            if message.text == "‚ùå":
                bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_main)
            else:
                bot.send_message(message.chat.id, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.', reply_markup=markup_can)
                bot.register_next_step_handler(message, update_photo)
        else:
            bot.send_message(message.chat.id, '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ—â–µ —Ä–∞–∑.', reply_markup=markup_can)
            bot.register_next_step_handler(message, update_photo)
    except:
        unknown_error(message)
def update_fage(message):
    try:
        global markup_can
        global markup_main
        if message.text == "‚ùå":
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=markup_main)
        else:
            ages = message.text.split()
            if (len(ages) == 2) and (ages[0].isnumeric()) and (ages[1].isnumeric()) and (int(ages[1]) >= int(ages[0])):
                cur.execute(f"update dating.users set finding_age_min = {ages[0]}, finding_age_max = {ages[1]} where user_id = {message.chat.id}")
                con.commit()
                bot.send_message(message.chat.id, f'–£—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –ø–æ–ø–∞–¥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª—é–¥–∏ –≤ –≤–æ–∑—Ä–∞—Å—Ç–µ –æ—Ç {ages[0]} –¥–æ {ages[1]}', reply_markup=markup_main)
            else:
                bot.send_message(message.chat.id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–±—ã –≤–∞–º –ø–æ–ø–∞–¥–∞–ª–∏—Å—å –ª—é–¥–∏ –æ—Ç 15 –¥–æ 16 –ª–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏–∏—â—à–∏—Ç–µ "15 16"', reply_markup=markup_can)
                bot.register_next_step_handler(message, update_fage)
    except:
        unknown_error(message)
def update_fgender(message):
    try:
        global markup_anketa
        if message.text == "üôé‚Äç‚ôÇ":
            cur.execute(f"update dating.users set user_finding_gender = 'male' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ú—É–∂—Å–∫–æ–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=markup_anketa)
            show_anketa(message)
        elif message.text == "üôé‚Äç‚ôÄ":
            cur.execute(f"update dating.users set user_finding_gender = 'female' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=markup_anketa)
            show_anketa(message)
        elif message.text == "üöª":
            cur.execute(f"update dating.users set user_finding_gender = 'trans' where user_id = {message.chat.id}")
            con.commit()
            bot.send_message(message.chat.id, f"–ë—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–±–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤—Ç–µ–ª–µ–π. –í–æ—Ç —Ç–≤–æ—è –∞–Ω–∫–µ—Ç–∞:", reply_markup=markup_anketa)
            show_anketa(message)
        else:
            bot.send_message(message.chat.id, f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É.")
            bot.register_next_step_handler(message, update_fgender)
    except:
        unknown_error(message)
@bot.message_handler(content_types=['text'])
def main_menu(message):
    try:
        global markup_main
        global markup_finding
        if message.text == '‚öôÔ∏è':  
            show_anketa(message)
            bot.send_message(message.chat.id, '–ê–≤—Ç–æ—Ä –±–æ—Ç–∞: @gpankov31', reply_markup=markup_anketa)
        elif message.text == 'üöÄ':
            cur.execute(f"update dating.users  set is_actually  = true where user_id = {message.chat.id};")
            con.commit()
            bot.send_message(message.from_user.id, 'üîé –ü–æ–∏—Å–∫...', reply_markup=markup_finding)
        elif message.text == 'üò¥':
            cur.execute(f"update dating.users  set is_actually  = false where user_id = {message.chat.id};")
            con.commit()
            bot.send_message(message.from_user.id, '–ê–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ø–∞–¥–∞—Ç—å—Å—è –Ω–∏–∫–æ–º—É. –ß—Ç–æ–±—ã –∞–Ω–∫–µ—Ç–∞ –±—ã–ª–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –æ–ø—è—Ç—å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ —Ä–∞–∫–µ—Ç—É(üöÄ)', reply_markup=markup_main)
        elif (message.text == '‚ùå'):
            bot.send_message(message.from_user.id, '–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup_main)
        else:
            angry_list = ["üò°–ß—É–º–±–∞ —Ç—ã —Å–æ–≤—Å–µ–º –∫–æ–Ω—á–µ–Ω–Ω—ã–π? —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é... —Å—Ö–æ–¥–∏ –∫ –¥–æ–∫—Ç–æ—Ä—É, –ø–æ–ø–µ–π —Ç–∞–±–ª–µ—Ç–æ—á–∫–∏üò°", "ü§¨—ã—ã–´–´–´—ã—ã—ã—ç—ç—ç –±–∞ –±—É –±—ç –π–π —è –Ω–µ –ø–æ–Ω–∏–º–∞—éü§¨", "üòØ–ë–µ–∑ –ø–æ–Ω—è—Ç–∏—è –æ —á–µ–º —Ç—ã, —á–µ–ª–æ–≤–µ–∫üòØ", "ü•∫–ú–µ–Ω—è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —Ç–∞–∫–∏–µ —É–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã....ü•∫", "üßê–¢—ã –æ —á–µ–º??üßê", "ü§°–ß—Ç–æ.–¢—ã.–ù–µ—Å–µ—à—å.ü§°"]
            bot.send_message(message.from_user.id, text=random.choice(angry_list), reply_markup=markup_main)
    except:
        unknown_error(message)
@bot.callback_query_handler(func=lambda call:True)
def callback_query(call):
        try:
            global markup_del
            global markup_can
            global markup_option
            global markup_fg
            global markup_ug
            global markup_type
            if call.message:
                if call.data == 'photo':
                    bot.send_message(call.message.chat.id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:', reply_markup=markup_can)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.register_next_step_handler(call.message, update_photo)
                elif call.data == 'text':
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:', reply_markup=markup_can)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.register_next_step_handler(call.message, update_text)
                elif call.data == 'name':
                    bot.send_message(call.message.chat.id, '–ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?', reply_markup=markup_can)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.register_next_step_handler(call.message, update_name)
                elif call.data == 'age':
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç:', reply_markup=markup_can)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.register_next_step_handler(call.message, update_age)
                elif call.data == 'city':
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:', reply_markup=markup_can)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.register_next_step_handler(call.message, update_city)
                elif call.data == 'my_gender':
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª:', reply_markup=markup_ug)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.register_next_step_handler(call.message, update_gender)
                elif call.data == 'option':
                    bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é', reply_markup=markup_option)
                elif call.data == 'back':
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.', reply_markup=markup_del)
                elif call.data == 'f_gender':
                    bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª:', reply_markup=markup_fg)
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—É—Ä–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.register_next_step_handler(call.message, update_fgender)
                elif call.data == 'f_age':
                    cur.execute(f'select finding_age_min, finding_age_max from dating.users where user_id = {call.message.chat.id}')
                    data = cur.fetchall()
                    data = data[0]
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—É—Ä–∫—Ü–∏–∏.', reply_markup=markup_del)
                    bot.send_message(call.message.chat.id, f'–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {data[0]}\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {data[1]}\n\n–í–≤–µ–¥–∏—Ç–µ 2 —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –≥–¥–µ –ø–µ—Ä–≤–æ–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–æ–≤—ã–º –≤–æ–∑—Ä–∞—Å—Ç–æ–º, –∞ –≤—Ç–æ—Ä–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º.', reply_markup=markup_can)
                    bot.register_next_step_handler(call.message, update_fage)
                elif call.data == 'f_type':
                    cur.execute(f"select user_type from dating.users where user_id = {call.message.chat.id}")
                    textl = cur.fetchall()
                    if textl[0][0] == 'fr':
                        textl = '–¥—Ä—É–∑–µ–π –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.'
                    elif textl[0][0] == 'r':
                        textl = '–æ—Ç–Ω–æ—à–µ–Ω–∏—è.'
                    elif textl[0][0] == 'f':
                        textl = '–¥—Ä—É–∂–±—É.'
                    else:
                        textl = '–¥–µ–ª–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–µ.'
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—É—Ä–∫—Ü–∏–∏. –°–µ–π—á–∞—Å –≤—ã –∏—â–∏—Ç–µ {textl}', reply_markup=markup_del)
                    bot.send_message(call.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–π –∞–Ω–∫–µ—Ç—ã', reply_markup=markup_type)
                elif call.data == 'friend_rel':
                    cur.execute(f"update dating.users set user_type = 'fr' where user_id = {call.message.chat.id}")
                    con.commit()
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—ã –∏—â–µ—à—å –¥—Ä—É–∑–µ–π –∏–ª–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', reply_markup=markup_del)
                elif call.data == 'friend':
                    cur.execute(f"update dating.users set user_type = 'f' where user_id = {call.message.chat.id}")
                    con.commit()
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—ã –∏—â–µ—à—å –¥—Ä—É–∑–µ–π.', reply_markup=markup_del)
                elif call.data == 'rel':
                    cur.execute(f"update dating.users set user_type = 'r' where user_id = {call.message.chat.id}")
                    con.commit()
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—ã –∏—â–µ—à—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è', reply_markup=markup_del)
                elif call.data == 'diff':
                    cur.execute(f"update dating.users set user_type = 'd' where user_id = {call.message.chat.id}")
                    con.commit()
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–¢—ã –∏—â–µ—à—å –¥–µ–ª–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ.', reply_markup=markup_del)
                elif call.data == 'back_second':
                    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥.', reply_markup=markup_option)
        except:
            print('error callback')
while True:
    try:
        bot.polling(non_stop=True)
    except telebot.apihelper.ApiException as e:
        logging.error(e)
        bot.stop_polling()
